#include <iostream>
#include <set>
#include <algorithm>

using namespace std;

class NumberList {
private:
    int* numbers;  // Mảng động lưu danh sách số
    int size;      // Kích thước hiện tại của mảng
    int capacity;  // Dung lượng của mảng

    // Hàm mở rộng mảng khi cần
    void expandArray() {
        capacity *= 2;
        int* newNumbers = new int[capacity];
        for (int i = 0; i < size; i++) {
            newNumbers[i] = numbers[i];
        }
        delete[] numbers;
        numbers = newNumbers;
    }

public:
    // Constructor
    NumberList(int initialCapacity = 10) {
        size = 0;
        capacity = initialCapacity;
        numbers = new int[capacity];
    }

    // Destructor
    ~NumberList() {
        delete[] numbers;
    }

    // a. Nhập danh sách số nguyên
    void inputNumbers() {
        cout << "Nhập các số nguyên (nhập '#' để dừng):" << endl;
        string value;
        while (true) {
            cin >> value;
            if (value == "#") break;
            try {
                int num = stoi(value);
                addNumber(num);
            } catch (...) {
                cout << "Vui lòng nhập số nguyên hợp lệ." << endl;
            }
        }
    }

    // b. Thêm một phần tử vào danh sách
    void addNumber(int num) {
        if (size == capacity) {
            expandArray();
        }
        numbers[size++] = num;
    }

    // c. Đếm số lần xuất hiện của k
    int countOccurrences(int k) {
        int count = 0;
        for (int i = 0; i < size; i++) {
            if (numbers[i] == k) {
                count++;
            }
        }
        return count;
    }

    // d. Kiểm tra có 3 số chẵn dương đứng cạnh nhau không?
    bool checkThreeConsecutiveEven(int& pos1, int& pos2, int& pos3) {
        for (int i = 0; i < size - 2; i++) {
            if (numbers[i] > 0 && numbers[i] % 2 == 0 &&
                numbers[i + 1] > 0 && numbers[i + 1] % 2 == 0 &&
                numbers[i + 2] > 0 && numbers[i + 2] % 2 == 0) {
                pos1 = i;
                pos2 = i + 1;
                pos3 = i + 2;
                return true;
            }
        }
        return false;
    }

    // e. Sắp xếp danh sách theo thứ tự tăng dần (sử dụng thuật toán sắp xếp nổi bọt)
    void sortNumbers() {
        for (int i = 0; i < size - 1; i++) {
            for (int j = 0; j < size - i - 1; j++) {
                if (numbers[j] > numbers[j + 1]) {
                    swap(numbers[j], numbers[j + 1]);
                }
            }
        }
    }

    // Kiểm tra số nguyên tố
    bool isPrime(int num) {
        if (num < 2) return false;
        for (int i = 2; i * i <= num; i++) {
            if (num % i == 0) return false;
        }
        return true;
    }

    // f. Xóa tất cả số nguyên tố khỏi danh sách
    void removePrimes() {
        int newSize = 0;
        for (int i = 0; i < size; i++) {
            if (!isPrime(numbers[i])) {
                numbers[newSize++] = numbers[i];
            }
        }
        size = newSize;
    }

    // g. Xóa các số trùng nhau, chỉ giữ lại một số
    void removeDuplicates() {
        set<int> seen;
        int newSize = 0;
        for (int i = 0; i < size; i++) {
            if (seen.insert(numbers[i]).second) {
                numbers[newSize++] = numbers[i];
            }
        }
        size = newSize;
    }

    // Hiển thị danh sách số
    void displayNumbers() {
        cout << "Danh sách số: ";
        for (int i = 0; i < size; i++) {
            cout << numbers[i] << " ";
        }
        cout << endl;
    }
};

// Hàm main để kiểm tra các chức năng
int main() {
    NumberList list;
    list.inputNumbers();
    
    // Kiểm tra các chức năng
    list.displayNumbers();
    list.addNumber(5);
    cout << "Sau khi thêm 5: ";
    list.displayNumbers();

    int k;
    cout << "Nhập số k cần đếm: ";
    cin >> k;
    cout << "Số lần xuất hiện của " << k << ": " << list.countOccurrences(k) << endl;

    int pos1, pos2, pos3;
    if (list.checkThreeConsecutiveEven(pos1, pos2, pos3)) {
        cout << "Có 3 số chẵn dương liên tiếp tại vị trí: " << pos1 << ", " << pos2 << ", " << pos3 << endl;
    } else {
        cout << "Không có 3 số chẵn dương liên tiếp." << endl;
    }

    list.sortNumbers();
    cout << "Danh sách sau khi sắp xếp: ";
    list.displayNumbers();

    list.removePrimes();
    cout << "Danh sách sau khi xóa số nguyên tố: ";
    list.displayNumbers();

    list.removeDuplicates();
    cout << "Danh sách sau khi xóa phần tử trùng nhau: ";
    list.displayNumbers();

    return 0;
}
